/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sjkim.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.LocalizedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the DataType service. Represents a row in the &quot;SJKIM_DataType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>sjkim.model.impl.DataTypeModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>sjkim.model.impl.DataTypeImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataType
 * @generated
 */
@ProviderType
public interface DataTypeModel extends BaseModel<DataType>, LocalizedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a data type model instance should use the {@link DataType} interface instead.
	 */

	/**
	 * Returns the primary key of this data type.
	 *
	 * @return the primary key of this data type
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this data type.
	 *
	 * @param primaryKey the primary key of this data type
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the data type no of this data type.
	 *
	 * @return the data type no of this data type
	 */
	public long getDataTypeNo();

	/**
	 * Sets the data type no of this data type.
	 *
	 * @param dataTypeNo the data type no of this data type
	 */
	public void setDataTypeNo(long dataTypeNo);

	/**
	 * Returns the data type nv of this data type.
	 *
	 * @return the data type nv of this data type
	 */
	@AutoEscape
	public String getDataTypeNV();

	/**
	 * Sets the data type nv of this data type.
	 *
	 * @param dataTypeNV the data type nv of this data type
	 */
	public void setDataTypeNV(String dataTypeNV);

	/**
	 * Returns the data type name of this data type.
	 *
	 * @return the data type name of this data type
	 */
	@AutoEscape
	public String getDataTypeName();

	/**
	 * Sets the data type name of this data type.
	 *
	 * @param dataTypeName the data type name of this data type
	 */
	public void setDataTypeName(String dataTypeName);

	/**
	 * Returns the data type version of this data type.
	 *
	 * @return the data type version of this data type
	 */
	@AutoEscape
	public String getDataTypeVersion();

	/**
	 * Sets the data type version of this data type.
	 *
	 * @param dataTypeVersion the data type version of this data type
	 */
	public void setDataTypeVersion(String dataTypeVersion);

	/**
	 * Returns the data type display name of this data type.
	 *
	 * @return the data type display name of this data type
	 */
	public String getDataTypeDisplayName();

	/**
	 * Returns the localized data type display name of this data type in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized data type display name of this data type
	 */
	@AutoEscape
	public String getDataTypeDisplayName(Locale locale);

	/**
	 * Returns the localized data type display name of this data type in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data type display name of this data type. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDataTypeDisplayName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized data type display name of this data type in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized data type display name of this data type
	 */
	@AutoEscape
	public String getDataTypeDisplayName(String languageId);

	/**
	 * Returns the localized data type display name of this data type in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data type display name of this data type
	 */
	@AutoEscape
	public String getDataTypeDisplayName(String languageId, boolean useDefault);

	@AutoEscape
	public String getDataTypeDisplayNameCurrentLanguageId();

	@AutoEscape
	public String getDataTypeDisplayNameCurrentValue();

	/**
	 * Returns a map of the locales and localized data type display names of this data type.
	 *
	 * @return the locales and localized data type display names of this data type
	 */
	public Map<Locale, String> getDataTypeDisplayNameMap();

	/**
	 * Sets the data type display name of this data type.
	 *
	 * @param dataTypeDisplayName the data type display name of this data type
	 */
	public void setDataTypeDisplayName(String dataTypeDisplayName);

	/**
	 * Sets the localized data type display name of this data type in the language.
	 *
	 * @param dataTypeDisplayName the localized data type display name of this data type
	 * @param locale the locale of the language
	 */
	public void setDataTypeDisplayName(
		String dataTypeDisplayName, Locale locale);

	/**
	 * Sets the localized data type display name of this data type in the language, and sets the default locale.
	 *
	 * @param dataTypeDisplayName the localized data type display name of this data type
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDataTypeDisplayName(
		String dataTypeDisplayName, Locale locale, Locale defaultLocale);

	public void setDataTypeDisplayNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized data type display names of this data type from the map of locales and localized data type display names.
	 *
	 * @param dataTypeDisplayNameMap the locales and localized data type display names of this data type
	 */
	public void setDataTypeDisplayNameMap(
		Map<Locale, String> dataTypeDisplayNameMap);

	/**
	 * Sets the localized data type display names of this data type from the map of locales and localized data type display names, and sets the default locale.
	 *
	 * @param dataTypeDisplayNameMap the locales and localized data type display names of this data type
	 * @param defaultLocale the default locale
	 */
	public void setDataTypeDisplayNameMap(
		Map<Locale, String> dataTypeDisplayNameMap, Locale defaultLocale);

	/**
	 * Returns the data type explanation of this data type.
	 *
	 * @return the data type explanation of this data type
	 */
	public String getDataTypeExplanation();

	/**
	 * Returns the localized data type explanation of this data type in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized data type explanation of this data type
	 */
	@AutoEscape
	public String getDataTypeExplanation(Locale locale);

	/**
	 * Returns the localized data type explanation of this data type in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data type explanation of this data type. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDataTypeExplanation(Locale locale, boolean useDefault);

	/**
	 * Returns the localized data type explanation of this data type in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized data type explanation of this data type
	 */
	@AutoEscape
	public String getDataTypeExplanation(String languageId);

	/**
	 * Returns the localized data type explanation of this data type in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data type explanation of this data type
	 */
	@AutoEscape
	public String getDataTypeExplanation(String languageId, boolean useDefault);

	@AutoEscape
	public String getDataTypeExplanationCurrentLanguageId();

	@AutoEscape
	public String getDataTypeExplanationCurrentValue();

	/**
	 * Returns a map of the locales and localized data type explanations of this data type.
	 *
	 * @return the locales and localized data type explanations of this data type
	 */
	public Map<Locale, String> getDataTypeExplanationMap();

	/**
	 * Sets the data type explanation of this data type.
	 *
	 * @param dataTypeExplanation the data type explanation of this data type
	 */
	public void setDataTypeExplanation(String dataTypeExplanation);

	/**
	 * Sets the localized data type explanation of this data type in the language.
	 *
	 * @param dataTypeExplanation the localized data type explanation of this data type
	 * @param locale the locale of the language
	 */
	public void setDataTypeExplanation(
		String dataTypeExplanation, Locale locale);

	/**
	 * Sets the localized data type explanation of this data type in the language, and sets the default locale.
	 *
	 * @param dataTypeExplanation the localized data type explanation of this data type
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDataTypeExplanation(
		String dataTypeExplanation, Locale locale, Locale defaultLocale);

	public void setDataTypeExplanationCurrentLanguageId(String languageId);

	/**
	 * Sets the localized data type explanations of this data type from the map of locales and localized data type explanations.
	 *
	 * @param dataTypeExplanationMap the locales and localized data type explanations of this data type
	 */
	public void setDataTypeExplanationMap(
		Map<Locale, String> dataTypeExplanationMap);

	/**
	 * Sets the localized data type explanations of this data type from the map of locales and localized data type explanations, and sets the default locale.
	 *
	 * @param dataTypeExplanationMap the locales and localized data type explanations of this data type
	 * @param defaultLocale the default locale
	 */
	public void setDataTypeExplanationMap(
		Map<Locale, String> dataTypeExplanationMap, Locale defaultLocale);

	/**
	 * Returns the sample file name of this data type.
	 *
	 * @return the sample file name of this data type
	 */
	@AutoEscape
	public String getSampleFileName();

	/**
	 * Sets the sample file name of this data type.
	 *
	 * @param sampleFileName the sample file name of this data type
	 */
	public void setSampleFileName(String sampleFileName);

	/**
	 * Returns the sample real file name of this data type.
	 *
	 * @return the sample real file name of this data type
	 */
	@AutoEscape
	public String getSampleRealFileName();

	/**
	 * Sets the sample real file name of this data type.
	 *
	 * @param sampleRealFileName the sample real file name of this data type
	 */
	public void setSampleRealFileName(String sampleRealFileName);

	/**
	 * Returns the sample file upload path of this data type.
	 *
	 * @return the sample file upload path of this data type
	 */
	@AutoEscape
	public String getSampleFileUploadPath();

	/**
	 * Sets the sample file upload path of this data type.
	 *
	 * @param sampleFileUploadPath the sample file upload path of this data type
	 */
	public void setSampleFileUploadPath(String sampleFileUploadPath);

	/**
	 * Returns the sample file type of this data type.
	 *
	 * @return the sample file type of this data type
	 */
	@AutoEscape
	public String getSampleFileType();

	/**
	 * Sets the sample file type of this data type.
	 *
	 * @param sampleFileType the sample file type of this data type
	 */
	public void setSampleFileType(String sampleFileType);

	/**
	 * Returns the data type writer of this data type.
	 *
	 * @return the data type writer of this data type
	 */
	@AutoEscape
	public String getDataTypeWriter();

	/**
	 * Sets the data type writer of this data type.
	 *
	 * @param dataTypeWriter the data type writer of this data type
	 */
	public void setDataTypeWriter(String dataTypeWriter);

	/**
	 * Returns the data type write date of this data type.
	 *
	 * @return the data type write date of this data type
	 */
	public Date getDataTypeWriteDate();

	/**
	 * Sets the data type write date of this data type.
	 *
	 * @param dataTypeWriteDate the data type write date of this data type
	 */
	public void setDataTypeWriteDate(Date dataTypeWriteDate);

	/**
	 * Returns the data type update date of this data type.
	 *
	 * @return the data type update date of this data type
	 */
	public Date getDataTypeUpdateDate();

	/**
	 * Sets the data type update date of this data type.
	 *
	 * @param dataTypeUpdateDate the data type update date of this data type
	 */
	public void setDataTypeUpdateDate(Date dataTypeUpdateDate);

	/**
	 * Returns the data type structure of this data type.
	 *
	 * @return the data type structure of this data type
	 */
	public String getDataTypeStructure();

	/**
	 * Returns the localized data type structure of this data type in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized data type structure of this data type
	 */
	@AutoEscape
	public String getDataTypeStructure(Locale locale);

	/**
	 * Returns the localized data type structure of this data type in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data type structure of this data type. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDataTypeStructure(Locale locale, boolean useDefault);

	/**
	 * Returns the localized data type structure of this data type in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized data type structure of this data type
	 */
	@AutoEscape
	public String getDataTypeStructure(String languageId);

	/**
	 * Returns the localized data type structure of this data type in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data type structure of this data type
	 */
	@AutoEscape
	public String getDataTypeStructure(String languageId, boolean useDefault);

	@AutoEscape
	public String getDataTypeStructureCurrentLanguageId();

	@AutoEscape
	public String getDataTypeStructureCurrentValue();

	/**
	 * Returns a map of the locales and localized data type structures of this data type.
	 *
	 * @return the locales and localized data type structures of this data type
	 */
	public Map<Locale, String> getDataTypeStructureMap();

	/**
	 * Sets the data type structure of this data type.
	 *
	 * @param dataTypeStructure the data type structure of this data type
	 */
	public void setDataTypeStructure(String dataTypeStructure);

	/**
	 * Sets the localized data type structure of this data type in the language.
	 *
	 * @param dataTypeStructure the localized data type structure of this data type
	 * @param locale the locale of the language
	 */
	public void setDataTypeStructure(String dataTypeStructure, Locale locale);

	/**
	 * Sets the localized data type structure of this data type in the language, and sets the default locale.
	 *
	 * @param dataTypeStructure the localized data type structure of this data type
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDataTypeStructure(
		String dataTypeStructure, Locale locale, Locale defaultLocale);

	public void setDataTypeStructureCurrentLanguageId(String languageId);

	/**
	 * Sets the localized data type structures of this data type from the map of locales and localized data type structures.
	 *
	 * @param dataTypeStructureMap the locales and localized data type structures of this data type
	 */
	public void setDataTypeStructureMap(
		Map<Locale, String> dataTypeStructureMap);

	/**
	 * Sets the localized data type structures of this data type from the map of locales and localized data type structures, and sets the default locale.
	 *
	 * @param dataTypeStructureMap the locales and localized data type structures of this data type
	 * @param defaultLocale the default locale
	 */
	public void setDataTypeStructureMap(
		Map<Locale, String> dataTypeStructureMap, Locale defaultLocale);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

}