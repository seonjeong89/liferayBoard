/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sjkim.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import sjkim.model.UploadFile;
import sjkim.model.UploadFileModel;
import sjkim.model.UploadFileSoap;

/**
 * The base model implementation for the UploadFile service. Represents a row in the &quot;SJKIM_UploadFile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UploadFileModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UploadFileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UploadFileImpl
 * @generated
 */
@JSON(strict = true)
public class UploadFileModelImpl
	extends BaseModelImpl<UploadFile> implements UploadFileModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a upload file model instance should use the <code>UploadFile</code> interface instead.
	 */
	public static final String TABLE_NAME = "SJKIM_UploadFile";

	public static final Object[][] TABLE_COLUMNS = {
		{"uploadFileNo", Types.BIGINT}, {"uploadFileBoardNo", Types.BIGINT},
		{"uploadFileName", Types.VARCHAR},
		{"uploadRealFileName", Types.VARCHAR},
		{"uploadFileUploadPath", Types.VARCHAR},
		{"uploadFileMimeType", Types.VARCHAR},
		{"uploadFileWriter", Types.VARCHAR},
		{"uploadFileWriteDate", Types.TIMESTAMP},
		{"uploadFileUpdateDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uploadFileNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uploadFileBoardNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uploadFileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadRealFileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadFileUploadPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadFileMimeType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadFileWriter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("uploadFileWriteDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("uploadFileUpdateDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SJKIM_UploadFile (uploadFileNo LONG not null primary key,uploadFileBoardNo LONG,uploadFileName VARCHAR(255) null,uploadRealFileName VARCHAR(255) null,uploadFileUploadPath VARCHAR(1000) null,uploadFileMimeType VARCHAR(75) null,uploadFileWriter VARCHAR(255) null,uploadFileWriteDate DATE null,uploadFileUpdateDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table SJKIM_UploadFile";

	public static final String ORDER_BY_JPQL =
		" ORDER BY uploadFile.uploadFileNo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SJKIM_UploadFile.uploadFileNo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UPLOADFILEBOARDNO_COLUMN_BITMASK = 1L;

	public static final long UPLOADFILENAME_COLUMN_BITMASK = 2L;

	public static final long UPLOADFILENO_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UploadFile toModel(UploadFileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UploadFile model = new UploadFileImpl();

		model.setUploadFileNo(soapModel.getUploadFileNo());
		model.setUploadFileBoardNo(soapModel.getUploadFileBoardNo());
		model.setUploadFileName(soapModel.getUploadFileName());
		model.setUploadRealFileName(soapModel.getUploadRealFileName());
		model.setUploadFileUploadPath(soapModel.getUploadFileUploadPath());
		model.setUploadFileMimeType(soapModel.getUploadFileMimeType());
		model.setUploadFileWriter(soapModel.getUploadFileWriter());
		model.setUploadFileWriteDate(soapModel.getUploadFileWriteDate());
		model.setUploadFileUpdateDate(soapModel.getUploadFileUpdateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UploadFile> toModels(UploadFileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UploadFile> models = new ArrayList<UploadFile>(soapModels.length);

		for (UploadFileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public UploadFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _uploadFileNo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUploadFileNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uploadFileNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UploadFile.class;
	}

	@Override
	public String getModelClassName() {
		return UploadFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UploadFile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UploadFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UploadFile, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((UploadFile)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UploadFile, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UploadFile, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UploadFile)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UploadFile, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UploadFile, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UploadFile>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UploadFile.class.getClassLoader(), UploadFile.class,
			ModelWrapper.class);

		try {
			Constructor<UploadFile> constructor =
				(Constructor<UploadFile>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<UploadFile, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UploadFile, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UploadFile, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UploadFile, Object>>();
		Map<String, BiConsumer<UploadFile, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UploadFile, ?>>();

		attributeGetterFunctions.put(
			"uploadFileNo", UploadFile::getUploadFileNo);
		attributeSetterBiConsumers.put(
			"uploadFileNo",
			(BiConsumer<UploadFile, Long>)UploadFile::setUploadFileNo);
		attributeGetterFunctions.put(
			"uploadFileBoardNo", UploadFile::getUploadFileBoardNo);
		attributeSetterBiConsumers.put(
			"uploadFileBoardNo",
			(BiConsumer<UploadFile, Long>)UploadFile::setUploadFileBoardNo);
		attributeGetterFunctions.put(
			"uploadFileName", UploadFile::getUploadFileName);
		attributeSetterBiConsumers.put(
			"uploadFileName",
			(BiConsumer<UploadFile, String>)UploadFile::setUploadFileName);
		attributeGetterFunctions.put(
			"uploadRealFileName", UploadFile::getUploadRealFileName);
		attributeSetterBiConsumers.put(
			"uploadRealFileName",
			(BiConsumer<UploadFile, String>)UploadFile::setUploadRealFileName);
		attributeGetterFunctions.put(
			"uploadFileUploadPath", UploadFile::getUploadFileUploadPath);
		attributeSetterBiConsumers.put(
			"uploadFileUploadPath",
			(BiConsumer<UploadFile, String>)
				UploadFile::setUploadFileUploadPath);
		attributeGetterFunctions.put(
			"uploadFileMimeType", UploadFile::getUploadFileMimeType);
		attributeSetterBiConsumers.put(
			"uploadFileMimeType",
			(BiConsumer<UploadFile, String>)UploadFile::setUploadFileMimeType);
		attributeGetterFunctions.put(
			"uploadFileWriter", UploadFile::getUploadFileWriter);
		attributeSetterBiConsumers.put(
			"uploadFileWriter",
			(BiConsumer<UploadFile, String>)UploadFile::setUploadFileWriter);
		attributeGetterFunctions.put(
			"uploadFileWriteDate", UploadFile::getUploadFileWriteDate);
		attributeSetterBiConsumers.put(
			"uploadFileWriteDate",
			(BiConsumer<UploadFile, Date>)UploadFile::setUploadFileWriteDate);
		attributeGetterFunctions.put(
			"uploadFileUpdateDate", UploadFile::getUploadFileUpdateDate);
		attributeSetterBiConsumers.put(
			"uploadFileUpdateDate",
			(BiConsumer<UploadFile, Date>)UploadFile::setUploadFileUpdateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getUploadFileNo() {
		return _uploadFileNo;
	}

	@Override
	public void setUploadFileNo(long uploadFileNo) {
		_uploadFileNo = uploadFileNo;
	}

	@JSON
	@Override
	public long getUploadFileBoardNo() {
		return _uploadFileBoardNo;
	}

	@Override
	public void setUploadFileBoardNo(long uploadFileBoardNo) {
		_columnBitmask |= UPLOADFILEBOARDNO_COLUMN_BITMASK;

		if (!_setOriginalUploadFileBoardNo) {
			_setOriginalUploadFileBoardNo = true;

			_originalUploadFileBoardNo = _uploadFileBoardNo;
		}

		_uploadFileBoardNo = uploadFileBoardNo;
	}

	public long getOriginalUploadFileBoardNo() {
		return _originalUploadFileBoardNo;
	}

	@JSON
	@Override
	public String getUploadFileName() {
		if (_uploadFileName == null) {
			return "";
		}
		else {
			return _uploadFileName;
		}
	}

	@Override
	public void setUploadFileName(String uploadFileName) {
		_columnBitmask |= UPLOADFILENAME_COLUMN_BITMASK;

		if (_originalUploadFileName == null) {
			_originalUploadFileName = _uploadFileName;
		}

		_uploadFileName = uploadFileName;
	}

	public String getOriginalUploadFileName() {
		return GetterUtil.getString(_originalUploadFileName);
	}

	@JSON
	@Override
	public String getUploadRealFileName() {
		if (_uploadRealFileName == null) {
			return "";
		}
		else {
			return _uploadRealFileName;
		}
	}

	@Override
	public void setUploadRealFileName(String uploadRealFileName) {
		_uploadRealFileName = uploadRealFileName;
	}

	@JSON
	@Override
	public String getUploadFileUploadPath() {
		if (_uploadFileUploadPath == null) {
			return "";
		}
		else {
			return _uploadFileUploadPath;
		}
	}

	@Override
	public void setUploadFileUploadPath(String uploadFileUploadPath) {
		_uploadFileUploadPath = uploadFileUploadPath;
	}

	@JSON
	@Override
	public String getUploadFileMimeType() {
		if (_uploadFileMimeType == null) {
			return "";
		}
		else {
			return _uploadFileMimeType;
		}
	}

	@Override
	public void setUploadFileMimeType(String uploadFileMimeType) {
		_uploadFileMimeType = uploadFileMimeType;
	}

	@JSON
	@Override
	public String getUploadFileWriter() {
		if (_uploadFileWriter == null) {
			return "";
		}
		else {
			return _uploadFileWriter;
		}
	}

	@Override
	public void setUploadFileWriter(String uploadFileWriter) {
		_uploadFileWriter = uploadFileWriter;
	}

	@JSON
	@Override
	public Date getUploadFileWriteDate() {
		return _uploadFileWriteDate;
	}

	@Override
	public void setUploadFileWriteDate(Date uploadFileWriteDate) {
		_uploadFileWriteDate = uploadFileWriteDate;
	}

	@JSON
	@Override
	public Date getUploadFileUpdateDate() {
		return _uploadFileUpdateDate;
	}

	@Override
	public void setUploadFileUpdateDate(Date uploadFileUpdateDate) {
		_uploadFileUpdateDate = uploadFileUpdateDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, UploadFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UploadFile toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UploadFile>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UploadFileImpl uploadFileImpl = new UploadFileImpl();

		uploadFileImpl.setUploadFileNo(getUploadFileNo());
		uploadFileImpl.setUploadFileBoardNo(getUploadFileBoardNo());
		uploadFileImpl.setUploadFileName(getUploadFileName());
		uploadFileImpl.setUploadRealFileName(getUploadRealFileName());
		uploadFileImpl.setUploadFileUploadPath(getUploadFileUploadPath());
		uploadFileImpl.setUploadFileMimeType(getUploadFileMimeType());
		uploadFileImpl.setUploadFileWriter(getUploadFileWriter());
		uploadFileImpl.setUploadFileWriteDate(getUploadFileWriteDate());
		uploadFileImpl.setUploadFileUpdateDate(getUploadFileUpdateDate());

		uploadFileImpl.resetOriginalValues();

		return uploadFileImpl;
	}

	@Override
	public int compareTo(UploadFile uploadFile) {
		long primaryKey = uploadFile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UploadFile)) {
			return false;
		}

		UploadFile uploadFile = (UploadFile)object;

		long primaryKey = uploadFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUploadFileBoardNo = _uploadFileBoardNo;

		_setOriginalUploadFileBoardNo = false;

		_originalUploadFileName = _uploadFileName;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UploadFile> toCacheModel() {
		UploadFileCacheModel uploadFileCacheModel = new UploadFileCacheModel();

		uploadFileCacheModel.uploadFileNo = getUploadFileNo();

		uploadFileCacheModel.uploadFileBoardNo = getUploadFileBoardNo();

		uploadFileCacheModel.uploadFileName = getUploadFileName();

		String uploadFileName = uploadFileCacheModel.uploadFileName;

		if ((uploadFileName != null) && (uploadFileName.length() == 0)) {
			uploadFileCacheModel.uploadFileName = null;
		}

		uploadFileCacheModel.uploadRealFileName = getUploadRealFileName();

		String uploadRealFileName = uploadFileCacheModel.uploadRealFileName;

		if ((uploadRealFileName != null) &&
			(uploadRealFileName.length() == 0)) {

			uploadFileCacheModel.uploadRealFileName = null;
		}

		uploadFileCacheModel.uploadFileUploadPath = getUploadFileUploadPath();

		String uploadFileUploadPath = uploadFileCacheModel.uploadFileUploadPath;

		if ((uploadFileUploadPath != null) &&
			(uploadFileUploadPath.length() == 0)) {

			uploadFileCacheModel.uploadFileUploadPath = null;
		}

		uploadFileCacheModel.uploadFileMimeType = getUploadFileMimeType();

		String uploadFileMimeType = uploadFileCacheModel.uploadFileMimeType;

		if ((uploadFileMimeType != null) &&
			(uploadFileMimeType.length() == 0)) {

			uploadFileCacheModel.uploadFileMimeType = null;
		}

		uploadFileCacheModel.uploadFileWriter = getUploadFileWriter();

		String uploadFileWriter = uploadFileCacheModel.uploadFileWriter;

		if ((uploadFileWriter != null) && (uploadFileWriter.length() == 0)) {
			uploadFileCacheModel.uploadFileWriter = null;
		}

		Date uploadFileWriteDate = getUploadFileWriteDate();

		if (uploadFileWriteDate != null) {
			uploadFileCacheModel.uploadFileWriteDate =
				uploadFileWriteDate.getTime();
		}
		else {
			uploadFileCacheModel.uploadFileWriteDate = Long.MIN_VALUE;
		}

		Date uploadFileUpdateDate = getUploadFileUpdateDate();

		if (uploadFileUpdateDate != null) {
			uploadFileCacheModel.uploadFileUpdateDate =
				uploadFileUpdateDate.getTime();
		}
		else {
			uploadFileCacheModel.uploadFileUpdateDate = Long.MIN_VALUE;
		}

		return uploadFileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UploadFile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UploadFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UploadFile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UploadFile)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UploadFile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UploadFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UploadFile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UploadFile)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UploadFile>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _uploadFileNo;
	private long _uploadFileBoardNo;
	private long _originalUploadFileBoardNo;
	private boolean _setOriginalUploadFileBoardNo;
	private String _uploadFileName;
	private String _originalUploadFileName;
	private String _uploadRealFileName;
	private String _uploadFileUploadPath;
	private String _uploadFileMimeType;
	private String _uploadFileWriter;
	private Date _uploadFileWriteDate;
	private Date _uploadFileUpdateDate;
	private long _columnBitmask;
	private UploadFile _escapedModel;

}