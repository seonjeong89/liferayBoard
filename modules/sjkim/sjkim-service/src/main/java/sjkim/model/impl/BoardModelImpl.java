/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sjkim.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import sjkim.model.Board;
import sjkim.model.BoardModel;
import sjkim.model.BoardSoap;

/**
 * The base model implementation for the Board service. Represents a row in the &quot;SJKIM_Board&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BoardModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BoardImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BoardImpl
 * @generated
 */
@JSON(strict = true)
public class BoardModelImpl extends BaseModelImpl<Board> implements BoardModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a board model instance should use the <code>Board</code> interface instead.
	 */
	public static final String TABLE_NAME = "SJKIM_Board";

	public static final Object[][] TABLE_COLUMNS = {
		{"boardNo", Types.BIGINT}, {"boardTitle", Types.VARCHAR},
		{"boardContent", Types.VARCHAR}, {"boardWriter", Types.VARCHAR},
		{"boardWriteDate", Types.TIMESTAMP},
		{"boardUpdateDate", Types.TIMESTAMP}, {"boardViewCount", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("boardNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("boardTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("boardContent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("boardWriter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("boardWriteDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("boardUpdateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("boardViewCount", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SJKIM_Board (boardNo LONG not null primary key,boardTitle VARCHAR(255) null,boardContent VARCHAR(2000) null,boardWriter VARCHAR(255) null,boardWriteDate DATE null,boardUpdateDate DATE null,boardViewCount LONG)";

	public static final String TABLE_SQL_DROP = "drop table SJKIM_Board";

	public static final String ORDER_BY_JPQL = " ORDER BY board.boardNo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SJKIM_Board.boardNo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long BOARDTITLE_COLUMN_BITMASK = 1L;

	public static final long BOARDNO_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Board toModel(BoardSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Board model = new BoardImpl();

		model.setBoardNo(soapModel.getBoardNo());
		model.setBoardTitle(soapModel.getBoardTitle());
		model.setBoardContent(soapModel.getBoardContent());
		model.setBoardWriter(soapModel.getBoardWriter());
		model.setBoardWriteDate(soapModel.getBoardWriteDate());
		model.setBoardUpdateDate(soapModel.getBoardUpdateDate());
		model.setBoardViewCount(soapModel.getBoardViewCount());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Board> toModels(BoardSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Board> models = new ArrayList<Board>(soapModels.length);

		for (BoardSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public BoardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _boardNo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBoardNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _boardNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Board.class;
	}

	@Override
	public String getModelClassName() {
		return Board.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Board, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Board, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Board, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Board)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Board, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Board, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Board)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Board, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Board, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Board>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Board.class.getClassLoader(), Board.class, ModelWrapper.class);

		try {
			Constructor<Board> constructor =
				(Constructor<Board>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Board, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Board, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Board, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Board, Object>>();
		Map<String, BiConsumer<Board, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Board, ?>>();

		attributeGetterFunctions.put("boardNo", Board::getBoardNo);
		attributeSetterBiConsumers.put(
			"boardNo", (BiConsumer<Board, Long>)Board::setBoardNo);
		attributeGetterFunctions.put("boardTitle", Board::getBoardTitle);
		attributeSetterBiConsumers.put(
			"boardTitle", (BiConsumer<Board, String>)Board::setBoardTitle);
		attributeGetterFunctions.put("boardContent", Board::getBoardContent);
		attributeSetterBiConsumers.put(
			"boardContent", (BiConsumer<Board, String>)Board::setBoardContent);
		attributeGetterFunctions.put("boardWriter", Board::getBoardWriter);
		attributeSetterBiConsumers.put(
			"boardWriter", (BiConsumer<Board, String>)Board::setBoardWriter);
		attributeGetterFunctions.put(
			"boardWriteDate", Board::getBoardWriteDate);
		attributeSetterBiConsumers.put(
			"boardWriteDate",
			(BiConsumer<Board, Date>)Board::setBoardWriteDate);
		attributeGetterFunctions.put(
			"boardUpdateDate", Board::getBoardUpdateDate);
		attributeSetterBiConsumers.put(
			"boardUpdateDate",
			(BiConsumer<Board, Date>)Board::setBoardUpdateDate);
		attributeGetterFunctions.put(
			"boardViewCount", Board::getBoardViewCount);
		attributeSetterBiConsumers.put(
			"boardViewCount",
			(BiConsumer<Board, Long>)Board::setBoardViewCount);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getBoardNo() {
		return _boardNo;
	}

	@Override
	public void setBoardNo(long boardNo) {
		_boardNo = boardNo;
	}

	@JSON
	@Override
	public String getBoardTitle() {
		if (_boardTitle == null) {
			return "";
		}
		else {
			return _boardTitle;
		}
	}

	@Override
	public void setBoardTitle(String boardTitle) {
		_columnBitmask |= BOARDTITLE_COLUMN_BITMASK;

		if (_originalBoardTitle == null) {
			_originalBoardTitle = _boardTitle;
		}

		_boardTitle = boardTitle;
	}

	public String getOriginalBoardTitle() {
		return GetterUtil.getString(_originalBoardTitle);
	}

	@JSON
	@Override
	public String getBoardContent() {
		if (_boardContent == null) {
			return "";
		}
		else {
			return _boardContent;
		}
	}

	@Override
	public void setBoardContent(String boardContent) {
		_boardContent = boardContent;
	}

	@JSON
	@Override
	public String getBoardWriter() {
		if (_boardWriter == null) {
			return "";
		}
		else {
			return _boardWriter;
		}
	}

	@Override
	public void setBoardWriter(String boardWriter) {
		_boardWriter = boardWriter;
	}

	@JSON
	@Override
	public Date getBoardWriteDate() {
		return _boardWriteDate;
	}

	@Override
	public void setBoardWriteDate(Date boardWriteDate) {
		_boardWriteDate = boardWriteDate;
	}

	@JSON
	@Override
	public Date getBoardUpdateDate() {
		return _boardUpdateDate;
	}

	@Override
	public void setBoardUpdateDate(Date boardUpdateDate) {
		_boardUpdateDate = boardUpdateDate;
	}

	@JSON
	@Override
	public Long getBoardViewCount() {
		return _boardViewCount;
	}

	@Override
	public void setBoardViewCount(Long boardViewCount) {
		_boardViewCount = boardViewCount;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Board.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Board toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Board>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BoardImpl boardImpl = new BoardImpl();

		boardImpl.setBoardNo(getBoardNo());
		boardImpl.setBoardTitle(getBoardTitle());
		boardImpl.setBoardContent(getBoardContent());
		boardImpl.setBoardWriter(getBoardWriter());
		boardImpl.setBoardWriteDate(getBoardWriteDate());
		boardImpl.setBoardUpdateDate(getBoardUpdateDate());
		boardImpl.setBoardViewCount(getBoardViewCount());

		boardImpl.resetOriginalValues();

		return boardImpl;
	}

	@Override
	public int compareTo(Board board) {
		long primaryKey = board.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Board)) {
			return false;
		}

		Board board = (Board)object;

		long primaryKey = board.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalBoardTitle = _boardTitle;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Board> toCacheModel() {
		BoardCacheModel boardCacheModel = new BoardCacheModel();

		boardCacheModel.boardNo = getBoardNo();

		boardCacheModel.boardTitle = getBoardTitle();

		String boardTitle = boardCacheModel.boardTitle;

		if ((boardTitle != null) && (boardTitle.length() == 0)) {
			boardCacheModel.boardTitle = null;
		}

		boardCacheModel.boardContent = getBoardContent();

		String boardContent = boardCacheModel.boardContent;

		if ((boardContent != null) && (boardContent.length() == 0)) {
			boardCacheModel.boardContent = null;
		}

		boardCacheModel.boardWriter = getBoardWriter();

		String boardWriter = boardCacheModel.boardWriter;

		if ((boardWriter != null) && (boardWriter.length() == 0)) {
			boardCacheModel.boardWriter = null;
		}

		Date boardWriteDate = getBoardWriteDate();

		if (boardWriteDate != null) {
			boardCacheModel.boardWriteDate = boardWriteDate.getTime();
		}
		else {
			boardCacheModel.boardWriteDate = Long.MIN_VALUE;
		}

		Date boardUpdateDate = getBoardUpdateDate();

		if (boardUpdateDate != null) {
			boardCacheModel.boardUpdateDate = boardUpdateDate.getTime();
		}
		else {
			boardCacheModel.boardUpdateDate = Long.MIN_VALUE;
		}

		Long boardViewCount = getBoardViewCount();

		if (boardViewCount != null) {
			boardCacheModel.boardViewCount = boardViewCount;
		}

		return boardCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Board, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Board, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Board, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Board)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Board, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Board, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Board, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Board)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Board>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _boardNo;
	private String _boardTitle;
	private String _originalBoardTitle;
	private String _boardContent;
	private String _boardWriter;
	private Date _boardWriteDate;
	private Date _boardUpdateDate;
	private Long _boardViewCount;
	private long _columnBitmask;
	private Board _escapedModel;

}