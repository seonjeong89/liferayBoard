/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package sjkim.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

import sjkim.model.DataType;
import sjkim.model.DataTypeModel;
import sjkim.model.DataTypeSoap;

/**
 * The base model implementation for the DataType service. Represents a row in the &quot;SJKIM_DataType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DataTypeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataTypeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataTypeImpl
 * @generated
 */
@JSON(strict = true)
public class DataTypeModelImpl
	extends BaseModelImpl<DataType> implements DataTypeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data type model instance should use the <code>DataType</code> interface instead.
	 */
	public static final String TABLE_NAME = "SJKIM_DataType";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataTypeNo", Types.BIGINT}, {"dataTypeNV", Types.VARCHAR},
		{"dataTypeName", Types.VARCHAR}, {"dataTypeVersion", Types.VARCHAR},
		{"dataTypeDisplayName", Types.VARCHAR},
		{"dataTypeExplanation", Types.VARCHAR},
		{"sampleFileName", Types.VARCHAR},
		{"sampleRealFileName", Types.VARCHAR},
		{"sampleFileUploadPath", Types.VARCHAR},
		{"sampleFileType", Types.VARCHAR}, {"dataTypeWriter", Types.VARCHAR},
		{"dataTypeWriteDate", Types.TIMESTAMP},
		{"dataTypeUpdateDate", Types.TIMESTAMP},
		{"dataTypeStructure", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataTypeNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataTypeNV", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataTypeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataTypeVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataTypeDisplayName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataTypeExplanation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleFileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleRealFileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleFileUploadPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sampleFileType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataTypeWriter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataTypeWriteDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataTypeUpdateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataTypeStructure", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SJKIM_DataType (dataTypeNo LONG not null primary key,dataTypeNV VARCHAR(520) null,dataTypeName VARCHAR(255) null,dataTypeVersion VARCHAR(255) null,dataTypeDisplayName TEXT null,dataTypeExplanation TEXT null,sampleFileName VARCHAR(255) null,sampleRealFileName VARCHAR(255) null,sampleFileUploadPath VARCHAR(1000) null,sampleFileType VARCHAR(255) null,dataTypeWriter VARCHAR(75) null,dataTypeWriteDate DATE null,dataTypeUpdateDate DATE null,dataTypeStructure TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table SJKIM_DataType";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataType.dataTypeNo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SJKIM_DataType.dataTypeNo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long DATATYPENV_COLUMN_BITMASK = 1L;

	public static final long DATATYPENAME_COLUMN_BITMASK = 2L;

	public static final long DATATYPEVERSION_COLUMN_BITMASK = 4L;

	public static final long DATATYPENO_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DataType toModel(DataTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DataType model = new DataTypeImpl();

		model.setDataTypeNo(soapModel.getDataTypeNo());
		model.setDataTypeNV(soapModel.getDataTypeNV());
		model.setDataTypeName(soapModel.getDataTypeName());
		model.setDataTypeVersion(soapModel.getDataTypeVersion());
		model.setDataTypeDisplayName(soapModel.getDataTypeDisplayName());
		model.setDataTypeExplanation(soapModel.getDataTypeExplanation());
		model.setSampleFileName(soapModel.getSampleFileName());
		model.setSampleRealFileName(soapModel.getSampleRealFileName());
		model.setSampleFileUploadPath(soapModel.getSampleFileUploadPath());
		model.setSampleFileType(soapModel.getSampleFileType());
		model.setDataTypeWriter(soapModel.getDataTypeWriter());
		model.setDataTypeWriteDate(soapModel.getDataTypeWriteDate());
		model.setDataTypeUpdateDate(soapModel.getDataTypeUpdateDate());
		model.setDataTypeStructure(soapModel.getDataTypeStructure());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DataType> toModels(DataTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DataType> models = new ArrayList<DataType>(soapModels.length);

		for (DataTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DataTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataTypeNo;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataTypeNo(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataTypeNo;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataType.class;
	}

	@Override
	public String getModelClassName() {
		return DataType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataType, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataType, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataType, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((DataType)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataType, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataType, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataType)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataType, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataType, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DataType>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DataType.class.getClassLoader(), DataType.class,
			ModelWrapper.class);

		try {
			Constructor<DataType> constructor =
				(Constructor<DataType>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DataType, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataType, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataType, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DataType, Object>>();
		Map<String, BiConsumer<DataType, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DataType, ?>>();

		attributeGetterFunctions.put("dataTypeNo", DataType::getDataTypeNo);
		attributeSetterBiConsumers.put(
			"dataTypeNo", (BiConsumer<DataType, Long>)DataType::setDataTypeNo);
		attributeGetterFunctions.put("dataTypeNV", DataType::getDataTypeNV);
		attributeSetterBiConsumers.put(
			"dataTypeNV",
			(BiConsumer<DataType, String>)DataType::setDataTypeNV);
		attributeGetterFunctions.put("dataTypeName", DataType::getDataTypeName);
		attributeSetterBiConsumers.put(
			"dataTypeName",
			(BiConsumer<DataType, String>)DataType::setDataTypeName);
		attributeGetterFunctions.put(
			"dataTypeVersion", DataType::getDataTypeVersion);
		attributeSetterBiConsumers.put(
			"dataTypeVersion",
			(BiConsumer<DataType, String>)DataType::setDataTypeVersion);
		attributeGetterFunctions.put(
			"dataTypeDisplayName", DataType::getDataTypeDisplayName);
		attributeSetterBiConsumers.put(
			"dataTypeDisplayName",
			(BiConsumer<DataType, String>)DataType::setDataTypeDisplayName);
		attributeGetterFunctions.put(
			"dataTypeExplanation", DataType::getDataTypeExplanation);
		attributeSetterBiConsumers.put(
			"dataTypeExplanation",
			(BiConsumer<DataType, String>)DataType::setDataTypeExplanation);
		attributeGetterFunctions.put(
			"sampleFileName", DataType::getSampleFileName);
		attributeSetterBiConsumers.put(
			"sampleFileName",
			(BiConsumer<DataType, String>)DataType::setSampleFileName);
		attributeGetterFunctions.put(
			"sampleRealFileName", DataType::getSampleRealFileName);
		attributeSetterBiConsumers.put(
			"sampleRealFileName",
			(BiConsumer<DataType, String>)DataType::setSampleRealFileName);
		attributeGetterFunctions.put(
			"sampleFileUploadPath", DataType::getSampleFileUploadPath);
		attributeSetterBiConsumers.put(
			"sampleFileUploadPath",
			(BiConsumer<DataType, String>)DataType::setSampleFileUploadPath);
		attributeGetterFunctions.put(
			"sampleFileType", DataType::getSampleFileType);
		attributeSetterBiConsumers.put(
			"sampleFileType",
			(BiConsumer<DataType, String>)DataType::setSampleFileType);
		attributeGetterFunctions.put(
			"dataTypeWriter", DataType::getDataTypeWriter);
		attributeSetterBiConsumers.put(
			"dataTypeWriter",
			(BiConsumer<DataType, String>)DataType::setDataTypeWriter);
		attributeGetterFunctions.put(
			"dataTypeWriteDate", DataType::getDataTypeWriteDate);
		attributeSetterBiConsumers.put(
			"dataTypeWriteDate",
			(BiConsumer<DataType, Date>)DataType::setDataTypeWriteDate);
		attributeGetterFunctions.put(
			"dataTypeUpdateDate", DataType::getDataTypeUpdateDate);
		attributeSetterBiConsumers.put(
			"dataTypeUpdateDate",
			(BiConsumer<DataType, Date>)DataType::setDataTypeUpdateDate);
		attributeGetterFunctions.put(
			"dataTypeStructure", DataType::getDataTypeStructure);
		attributeSetterBiConsumers.put(
			"dataTypeStructure",
			(BiConsumer<DataType, String>)DataType::setDataTypeStructure);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDataTypeNo() {
		return _dataTypeNo;
	}

	@Override
	public void setDataTypeNo(long dataTypeNo) {
		_dataTypeNo = dataTypeNo;
	}

	@JSON
	@Override
	public String getDataTypeNV() {
		if (_dataTypeNV == null) {
			return "";
		}
		else {
			return _dataTypeNV;
		}
	}

	@Override
	public void setDataTypeNV(String dataTypeNV) {
		_columnBitmask |= DATATYPENV_COLUMN_BITMASK;

		if (_originalDataTypeNV == null) {
			_originalDataTypeNV = _dataTypeNV;
		}

		_dataTypeNV = dataTypeNV;
	}

	public String getOriginalDataTypeNV() {
		return GetterUtil.getString(_originalDataTypeNV);
	}

	@JSON
	@Override
	public String getDataTypeName() {
		if (_dataTypeName == null) {
			return "";
		}
		else {
			return _dataTypeName;
		}
	}

	@Override
	public void setDataTypeName(String dataTypeName) {
		_columnBitmask |= DATATYPENAME_COLUMN_BITMASK;

		if (_originalDataTypeName == null) {
			_originalDataTypeName = _dataTypeName;
		}

		_dataTypeName = dataTypeName;
	}

	public String getOriginalDataTypeName() {
		return GetterUtil.getString(_originalDataTypeName);
	}

	@JSON
	@Override
	public String getDataTypeVersion() {
		if (_dataTypeVersion == null) {
			return "";
		}
		else {
			return _dataTypeVersion;
		}
	}

	@Override
	public void setDataTypeVersion(String dataTypeVersion) {
		_columnBitmask |= DATATYPEVERSION_COLUMN_BITMASK;

		if (_originalDataTypeVersion == null) {
			_originalDataTypeVersion = _dataTypeVersion;
		}

		_dataTypeVersion = dataTypeVersion;
	}

	public String getOriginalDataTypeVersion() {
		return GetterUtil.getString(_originalDataTypeVersion);
	}

	@JSON
	@Override
	public String getDataTypeDisplayName() {
		if (_dataTypeDisplayName == null) {
			return "";
		}
		else {
			return _dataTypeDisplayName;
		}
	}

	@Override
	public String getDataTypeDisplayName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataTypeDisplayName(languageId);
	}

	@Override
	public String getDataTypeDisplayName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataTypeDisplayName(languageId, useDefault);
	}

	@Override
	public String getDataTypeDisplayName(String languageId) {
		return LocalizationUtil.getLocalization(
			getDataTypeDisplayName(), languageId);
	}

	@Override
	public String getDataTypeDisplayName(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getDataTypeDisplayName(), languageId, useDefault);
	}

	@Override
	public String getDataTypeDisplayNameCurrentLanguageId() {
		return _dataTypeDisplayNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDataTypeDisplayNameCurrentValue() {
		Locale locale = getLocale(_dataTypeDisplayNameCurrentLanguageId);

		return getDataTypeDisplayName(locale);
	}

	@Override
	public Map<Locale, String> getDataTypeDisplayNameMap() {
		return LocalizationUtil.getLocalizationMap(getDataTypeDisplayName());
	}

	@Override
	public void setDataTypeDisplayName(String dataTypeDisplayName) {
		_dataTypeDisplayName = dataTypeDisplayName;
	}

	@Override
	public void setDataTypeDisplayName(
		String dataTypeDisplayName, Locale locale) {

		setDataTypeDisplayName(
			dataTypeDisplayName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDataTypeDisplayName(
		String dataTypeDisplayName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(dataTypeDisplayName)) {
			setDataTypeDisplayName(
				LocalizationUtil.updateLocalization(
					getDataTypeDisplayName(), "DataTypeDisplayName",
					dataTypeDisplayName, languageId, defaultLanguageId));
		}
		else {
			setDataTypeDisplayName(
				LocalizationUtil.removeLocalization(
					getDataTypeDisplayName(), "DataTypeDisplayName",
					languageId));
		}
	}

	@Override
	public void setDataTypeDisplayNameCurrentLanguageId(String languageId) {
		_dataTypeDisplayNameCurrentLanguageId = languageId;
	}

	@Override
	public void setDataTypeDisplayNameMap(
		Map<Locale, String> dataTypeDisplayNameMap) {

		setDataTypeDisplayNameMap(
			dataTypeDisplayNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDataTypeDisplayNameMap(
		Map<Locale, String> dataTypeDisplayNameMap, Locale defaultLocale) {

		if (dataTypeDisplayNameMap == null) {
			return;
		}

		setDataTypeDisplayName(
			LocalizationUtil.updateLocalization(
				dataTypeDisplayNameMap, getDataTypeDisplayName(),
				"DataTypeDisplayName", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDataTypeExplanation() {
		if (_dataTypeExplanation == null) {
			return "";
		}
		else {
			return _dataTypeExplanation;
		}
	}

	@Override
	public String getDataTypeExplanation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataTypeExplanation(languageId);
	}

	@Override
	public String getDataTypeExplanation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataTypeExplanation(languageId, useDefault);
	}

	@Override
	public String getDataTypeExplanation(String languageId) {
		return LocalizationUtil.getLocalization(
			getDataTypeExplanation(), languageId);
	}

	@Override
	public String getDataTypeExplanation(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getDataTypeExplanation(), languageId, useDefault);
	}

	@Override
	public String getDataTypeExplanationCurrentLanguageId() {
		return _dataTypeExplanationCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDataTypeExplanationCurrentValue() {
		Locale locale = getLocale(_dataTypeExplanationCurrentLanguageId);

		return getDataTypeExplanation(locale);
	}

	@Override
	public Map<Locale, String> getDataTypeExplanationMap() {
		return LocalizationUtil.getLocalizationMap(getDataTypeExplanation());
	}

	@Override
	public void setDataTypeExplanation(String dataTypeExplanation) {
		_dataTypeExplanation = dataTypeExplanation;
	}

	@Override
	public void setDataTypeExplanation(
		String dataTypeExplanation, Locale locale) {

		setDataTypeExplanation(
			dataTypeExplanation, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDataTypeExplanation(
		String dataTypeExplanation, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(dataTypeExplanation)) {
			setDataTypeExplanation(
				LocalizationUtil.updateLocalization(
					getDataTypeExplanation(), "DataTypeExplanation",
					dataTypeExplanation, languageId, defaultLanguageId));
		}
		else {
			setDataTypeExplanation(
				LocalizationUtil.removeLocalization(
					getDataTypeExplanation(), "DataTypeExplanation",
					languageId));
		}
	}

	@Override
	public void setDataTypeExplanationCurrentLanguageId(String languageId) {
		_dataTypeExplanationCurrentLanguageId = languageId;
	}

	@Override
	public void setDataTypeExplanationMap(
		Map<Locale, String> dataTypeExplanationMap) {

		setDataTypeExplanationMap(
			dataTypeExplanationMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDataTypeExplanationMap(
		Map<Locale, String> dataTypeExplanationMap, Locale defaultLocale) {

		if (dataTypeExplanationMap == null) {
			return;
		}

		setDataTypeExplanation(
			LocalizationUtil.updateLocalization(
				dataTypeExplanationMap, getDataTypeExplanation(),
				"DataTypeExplanation", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getSampleFileName() {
		if (_sampleFileName == null) {
			return "";
		}
		else {
			return _sampleFileName;
		}
	}

	@Override
	public void setSampleFileName(String sampleFileName) {
		_sampleFileName = sampleFileName;
	}

	@JSON
	@Override
	public String getSampleRealFileName() {
		if (_sampleRealFileName == null) {
			return "";
		}
		else {
			return _sampleRealFileName;
		}
	}

	@Override
	public void setSampleRealFileName(String sampleRealFileName) {
		_sampleRealFileName = sampleRealFileName;
	}

	@JSON
	@Override
	public String getSampleFileUploadPath() {
		if (_sampleFileUploadPath == null) {
			return "";
		}
		else {
			return _sampleFileUploadPath;
		}
	}

	@Override
	public void setSampleFileUploadPath(String sampleFileUploadPath) {
		_sampleFileUploadPath = sampleFileUploadPath;
	}

	@JSON
	@Override
	public String getSampleFileType() {
		if (_sampleFileType == null) {
			return "";
		}
		else {
			return _sampleFileType;
		}
	}

	@Override
	public void setSampleFileType(String sampleFileType) {
		_sampleFileType = sampleFileType;
	}

	@JSON
	@Override
	public String getDataTypeWriter() {
		if (_dataTypeWriter == null) {
			return "";
		}
		else {
			return _dataTypeWriter;
		}
	}

	@Override
	public void setDataTypeWriter(String dataTypeWriter) {
		_dataTypeWriter = dataTypeWriter;
	}

	@JSON
	@Override
	public Date getDataTypeWriteDate() {
		return _dataTypeWriteDate;
	}

	@Override
	public void setDataTypeWriteDate(Date dataTypeWriteDate) {
		_dataTypeWriteDate = dataTypeWriteDate;
	}

	@JSON
	@Override
	public Date getDataTypeUpdateDate() {
		return _dataTypeUpdateDate;
	}

	@Override
	public void setDataTypeUpdateDate(Date dataTypeUpdateDate) {
		_dataTypeUpdateDate = dataTypeUpdateDate;
	}

	@JSON
	@Override
	public String getDataTypeStructure() {
		if (_dataTypeStructure == null) {
			return "";
		}
		else {
			return _dataTypeStructure;
		}
	}

	@Override
	public String getDataTypeStructure(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataTypeStructure(languageId);
	}

	@Override
	public String getDataTypeStructure(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDataTypeStructure(languageId, useDefault);
	}

	@Override
	public String getDataTypeStructure(String languageId) {
		return LocalizationUtil.getLocalization(
			getDataTypeStructure(), languageId);
	}

	@Override
	public String getDataTypeStructure(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDataTypeStructure(), languageId, useDefault);
	}

	@Override
	public String getDataTypeStructureCurrentLanguageId() {
		return _dataTypeStructureCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDataTypeStructureCurrentValue() {
		Locale locale = getLocale(_dataTypeStructureCurrentLanguageId);

		return getDataTypeStructure(locale);
	}

	@Override
	public Map<Locale, String> getDataTypeStructureMap() {
		return LocalizationUtil.getLocalizationMap(getDataTypeStructure());
	}

	@Override
	public void setDataTypeStructure(String dataTypeStructure) {
		_dataTypeStructure = dataTypeStructure;
	}

	@Override
	public void setDataTypeStructure(String dataTypeStructure, Locale locale) {
		setDataTypeStructure(
			dataTypeStructure, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDataTypeStructure(
		String dataTypeStructure, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(dataTypeStructure)) {
			setDataTypeStructure(
				LocalizationUtil.updateLocalization(
					getDataTypeStructure(), "DataTypeStructure",
					dataTypeStructure, languageId, defaultLanguageId));
		}
		else {
			setDataTypeStructure(
				LocalizationUtil.removeLocalization(
					getDataTypeStructure(), "DataTypeStructure", languageId));
		}
	}

	@Override
	public void setDataTypeStructureCurrentLanguageId(String languageId) {
		_dataTypeStructureCurrentLanguageId = languageId;
	}

	@Override
	public void setDataTypeStructureMap(
		Map<Locale, String> dataTypeStructureMap) {

		setDataTypeStructureMap(dataTypeStructureMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDataTypeStructureMap(
		Map<Locale, String> dataTypeStructureMap, Locale defaultLocale) {

		if (dataTypeStructureMap == null) {
			return;
		}

		setDataTypeStructure(
			LocalizationUtil.updateLocalization(
				dataTypeStructureMap, getDataTypeStructure(),
				"DataTypeStructure", LocaleUtil.toLanguageId(defaultLocale)));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DataType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> dataTypeDisplayNameMap =
			getDataTypeDisplayNameMap();

		for (Map.Entry<Locale, String> entry :
				dataTypeDisplayNameMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> dataTypeExplanationMap =
			getDataTypeExplanationMap();

		for (Map.Entry<Locale, String> entry :
				dataTypeExplanationMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> dataTypeStructureMap = getDataTypeStructureMap();

		for (Map.Entry<Locale, String> entry :
				dataTypeStructureMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDataTypeDisplayName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			DataType.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String dataTypeDisplayName = getDataTypeDisplayName(defaultLocale);

		if (Validator.isNull(dataTypeDisplayName)) {
			setDataTypeDisplayName(
				getDataTypeDisplayName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDataTypeDisplayName(
				getDataTypeDisplayName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String dataTypeExplanation = getDataTypeExplanation(defaultLocale);

		if (Validator.isNull(dataTypeExplanation)) {
			setDataTypeExplanation(
				getDataTypeExplanation(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDataTypeExplanation(
				getDataTypeExplanation(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String dataTypeStructure = getDataTypeStructure(defaultLocale);

		if (Validator.isNull(dataTypeStructure)) {
			setDataTypeStructure(
				getDataTypeStructure(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDataTypeStructure(
				getDataTypeStructure(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public DataType toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DataType>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataTypeImpl dataTypeImpl = new DataTypeImpl();

		dataTypeImpl.setDataTypeNo(getDataTypeNo());
		dataTypeImpl.setDataTypeNV(getDataTypeNV());
		dataTypeImpl.setDataTypeName(getDataTypeName());
		dataTypeImpl.setDataTypeVersion(getDataTypeVersion());
		dataTypeImpl.setDataTypeDisplayName(getDataTypeDisplayName());
		dataTypeImpl.setDataTypeExplanation(getDataTypeExplanation());
		dataTypeImpl.setSampleFileName(getSampleFileName());
		dataTypeImpl.setSampleRealFileName(getSampleRealFileName());
		dataTypeImpl.setSampleFileUploadPath(getSampleFileUploadPath());
		dataTypeImpl.setSampleFileType(getSampleFileType());
		dataTypeImpl.setDataTypeWriter(getDataTypeWriter());
		dataTypeImpl.setDataTypeWriteDate(getDataTypeWriteDate());
		dataTypeImpl.setDataTypeUpdateDate(getDataTypeUpdateDate());
		dataTypeImpl.setDataTypeStructure(getDataTypeStructure());

		dataTypeImpl.resetOriginalValues();

		return dataTypeImpl;
	}

	@Override
	public int compareTo(DataType dataType) {
		long primaryKey = dataType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DataType)) {
			return false;
		}

		DataType dataType = (DataType)object;

		long primaryKey = dataType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalDataTypeNV = _dataTypeNV;

		_originalDataTypeName = _dataTypeName;

		_originalDataTypeVersion = _dataTypeVersion;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DataType> toCacheModel() {
		DataTypeCacheModel dataTypeCacheModel = new DataTypeCacheModel();

		dataTypeCacheModel.dataTypeNo = getDataTypeNo();

		dataTypeCacheModel.dataTypeNV = getDataTypeNV();

		String dataTypeNV = dataTypeCacheModel.dataTypeNV;

		if ((dataTypeNV != null) && (dataTypeNV.length() == 0)) {
			dataTypeCacheModel.dataTypeNV = null;
		}

		dataTypeCacheModel.dataTypeName = getDataTypeName();

		String dataTypeName = dataTypeCacheModel.dataTypeName;

		if ((dataTypeName != null) && (dataTypeName.length() == 0)) {
			dataTypeCacheModel.dataTypeName = null;
		}

		dataTypeCacheModel.dataTypeVersion = getDataTypeVersion();

		String dataTypeVersion = dataTypeCacheModel.dataTypeVersion;

		if ((dataTypeVersion != null) && (dataTypeVersion.length() == 0)) {
			dataTypeCacheModel.dataTypeVersion = null;
		}

		dataTypeCacheModel.dataTypeDisplayName = getDataTypeDisplayName();

		String dataTypeDisplayName = dataTypeCacheModel.dataTypeDisplayName;

		if ((dataTypeDisplayName != null) &&
			(dataTypeDisplayName.length() == 0)) {

			dataTypeCacheModel.dataTypeDisplayName = null;
		}

		dataTypeCacheModel.dataTypeExplanation = getDataTypeExplanation();

		String dataTypeExplanation = dataTypeCacheModel.dataTypeExplanation;

		if ((dataTypeExplanation != null) &&
			(dataTypeExplanation.length() == 0)) {

			dataTypeCacheModel.dataTypeExplanation = null;
		}

		dataTypeCacheModel.sampleFileName = getSampleFileName();

		String sampleFileName = dataTypeCacheModel.sampleFileName;

		if ((sampleFileName != null) && (sampleFileName.length() == 0)) {
			dataTypeCacheModel.sampleFileName = null;
		}

		dataTypeCacheModel.sampleRealFileName = getSampleRealFileName();

		String sampleRealFileName = dataTypeCacheModel.sampleRealFileName;

		if ((sampleRealFileName != null) &&
			(sampleRealFileName.length() == 0)) {

			dataTypeCacheModel.sampleRealFileName = null;
		}

		dataTypeCacheModel.sampleFileUploadPath = getSampleFileUploadPath();

		String sampleFileUploadPath = dataTypeCacheModel.sampleFileUploadPath;

		if ((sampleFileUploadPath != null) &&
			(sampleFileUploadPath.length() == 0)) {

			dataTypeCacheModel.sampleFileUploadPath = null;
		}

		dataTypeCacheModel.sampleFileType = getSampleFileType();

		String sampleFileType = dataTypeCacheModel.sampleFileType;

		if ((sampleFileType != null) && (sampleFileType.length() == 0)) {
			dataTypeCacheModel.sampleFileType = null;
		}

		dataTypeCacheModel.dataTypeWriter = getDataTypeWriter();

		String dataTypeWriter = dataTypeCacheModel.dataTypeWriter;

		if ((dataTypeWriter != null) && (dataTypeWriter.length() == 0)) {
			dataTypeCacheModel.dataTypeWriter = null;
		}

		Date dataTypeWriteDate = getDataTypeWriteDate();

		if (dataTypeWriteDate != null) {
			dataTypeCacheModel.dataTypeWriteDate = dataTypeWriteDate.getTime();
		}
		else {
			dataTypeCacheModel.dataTypeWriteDate = Long.MIN_VALUE;
		}

		Date dataTypeUpdateDate = getDataTypeUpdateDate();

		if (dataTypeUpdateDate != null) {
			dataTypeCacheModel.dataTypeUpdateDate =
				dataTypeUpdateDate.getTime();
		}
		else {
			dataTypeCacheModel.dataTypeUpdateDate = Long.MIN_VALUE;
		}

		dataTypeCacheModel.dataTypeStructure = getDataTypeStructure();

		String dataTypeStructure = dataTypeCacheModel.dataTypeStructure;

		if ((dataTypeStructure != null) && (dataTypeStructure.length() == 0)) {
			dataTypeCacheModel.dataTypeStructure = null;
		}

		return dataTypeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataType, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataType, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataType, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DataType)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataType, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataType, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataType, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DataType)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DataType>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _dataTypeNo;
	private String _dataTypeNV;
	private String _originalDataTypeNV;
	private String _dataTypeName;
	private String _originalDataTypeName;
	private String _dataTypeVersion;
	private String _originalDataTypeVersion;
	private String _dataTypeDisplayName;
	private String _dataTypeDisplayNameCurrentLanguageId;
	private String _dataTypeExplanation;
	private String _dataTypeExplanationCurrentLanguageId;
	private String _sampleFileName;
	private String _sampleRealFileName;
	private String _sampleFileUploadPath;
	private String _sampleFileType;
	private String _dataTypeWriter;
	private Date _dataTypeWriteDate;
	private Date _dataTypeUpdateDate;
	private String _dataTypeStructure;
	private String _dataTypeStructureCurrentLanguageId;
	private long _columnBitmask;
	private DataType _escapedModel;

}